---
description: use me when using generateObject and needing to care aobu schemas
globs: 
alwaysApply: false
---
# Zod Generate Object Rule for Structured Outputs

## Purpose
This rule summarizes the restrictions and best practices for using Zod to generate JSON schemas for OpenAI Structured Outputs (e.g., with the OpenAI SDK or ai vercel sdk). It is based on the official documentation and current platform limitations.

---

## Acceptable Zod Usages

- **Root Schema Must Be an Object**
  - The root of your Zod schema must be a `z.object({ ... })`.
  - You **cannot** use `z.union`, `z.discriminatedUnion`, or `z.anyOf` at the root level.

- **All Fields Must Be Required**
  - All object properties must be required. Optional fields (`z.optional`) are **not allowed** at the top level.
  - To emulate optionality, use a union with `z.null()` (e.g., `z.union([z.string(), z.null()])`).

- **No Additional Properties**
  - The generated schema must set `additionalProperties: false`.
  - Do not allow extra keys not defined in your Zod object.

- **Supported Types**
  - `z.string()`, `z.number()`, `z.boolean()`, `z.object()`, `z.array()`, `z.enum()`, `z.null()`
  - Nested objects and arrays are supported (up to 5 levels deep, max 100 properties total).
  - Recursive schemas are supported using `$ref` (see docs for advanced usage).

- **String/Number Constraints**
  - You may use `.regex()` for string patterns, `.min()`, `.max()` for numbers/arrays, and `.email()` for email format.
  - Not all Zod refinements are supported—stick to basic constraints.

- **Enums**
  - Use `z.enum([...])` for string enums. Max 500 enum values, total string length for all values < 7,500 chars if >250 values.

- **Definitions ($defs)**
  - You can use Zod `.refine()` and `.describe()` for documentation, and reference subschemas for reuse.

- **No Discriminated Unions at Root**
  - You **cannot** use `z.discriminatedUnion` or any union at the root. Only inside object properties.

- **No Optional Properties**
  - All properties must be required. Use `z.union([Type, z.null()])` to emulate optionality.

- **No allOf, not, dependentRequired, etc.**
  - Only use the supported subset of JSON Schema (see docs for details).

---

## Example: Valid Zod Schema

```ts
import { z } from 'zod';

const UserSchema = z.object({
  name: z.string().describe('The name of the user'),
  username: z.string().regex(/^@[a-zA-Z0-9_]+$/).describe('The username, must start with @'),
  email: z.string().email().describe('The user\'s email'),
  age: z.union([z.number(), z.null()]).describe('Age, or null if unknown'),
});
```

## Example: Invalid Zod Schema (Not Allowed)

```ts
// ❌ Discriminated union at root
const schema = z.discriminatedUnion('type', [
  z.object({ type: z.literal('a'), value: z.string() }),
  z.object({ type: z.literal('b'), value: z.number() }),
]);

// ❌ Optional property
const schema = z.object({
  name: z.string(),
  nickname: z.string().optional(), // Not allowed
});
```

---

## Summary Table
| Feature                | Allowed? | Notes |
|------------------------|----------|-------|
| Root object            | Yes      | Must be z.object |
| Discriminated union    | No       | Not at root |
| Optional properties    | No       | Use union with null |
| additionalProperties   | No       | Must be false |
| Nested objects/arrays  | Yes      | Up to 5 levels |
| Enums                  | Yes      | Up to 500 values |
| Recursive schemas      | Yes      | Use $ref |
| String/number formats  | Yes      | Basic only |
| allOf, not, etc.       | No       | Not supported |

---

## References
- [OpenAI Structured Outputs Docs](mdc:https:/platform.openai.com/docs/guides/structured-outputs)
- [Zod Docs](mdc:https:/zod.dev)
- [ai vercel sdk](mdc:https:/sdk.vercel.ai/docs/guides/structured-output)




