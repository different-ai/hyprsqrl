**repo**: different-ai/hypr-v0

- always use pnpm
- always assume the server is already running and is running on port 3050
- always your browser
# General Direction
- always use kebab case for file names
- use viem when possible instead of ethers
- neon projectid is falling-wind-82436488
- if you mock data always create a new file in memory/mock-data-<name>.md to remember that we need to do get rid of it
- IF you mock stuff describe it at the end of the prompt && also create a new memory file to remember that we need to do get rid of ito
- when you encounter 
- use trpc to make api calls
- you should understnad that in nextjs a () is a logical path and not a physical path
- when doing ui and user facing stuff do not communicate about the underlying crypto implementation details use abstracted concepts instead


- Always check memory in .cursor/rules directory before starting tasks to see if there's a file name with relevant information
- After each significant edit, make a git commit that summarizes the changes

# Monorepo Structure (PNPM Workspace + Turbo)

This is a PNPM monorepo managed with Turborepo.
Key directories containing applications/packages:
- `packages/`: Contains the main applications and shared libraries.
- `pipes/`: Contains potentially auxiliary or specialized applications.

## Packages:

- **`packages/bank` (`@hypr/bank`)**: 
 - old bank app
  - Purpose: Seems to be the main banking/allocation application.
  - Type: Next.js App
  - Runs on Port: **3013** (`pnpm --filter bank dev`)
- **`packages/deep-yield` (`@hyperstable/deep-yield`)**:
  - Purpose: Likely related to yield strategies or AI analysis.
  - Type: Next.js App
  - Runs on Port: **3060** (`pnpm --filter deep-yield dev`)
- **`packages/web` (`@hyperstable/web`)**:
  - Purpose: Main application for the web we're in the process of integraitng packages/bank into it.
  - It does invoicing
  - Providees a bank account dashboard
  - Type: Next.js App
  - Runs on Port: **3050** (`pnpm --filter web dev`)
- **`packages/landing-v0` (`@hyperstable/landing`)**:
  - Purpose: Landing page application.
  - Type: Next.js App
  - Runs on Port: **3012** (`pnpm --filter landing dev`)
## `packages/web` Structure (`@hyperstable/web`)

This package contains the main user-facing web application, built with Next.js and tRPC.

- **`src/`**: Main source code directory.
    - **`app/`**: Next.js App Router directory.
        - Contains route definitions (directories like `dashboard/`, `invoice/`, `onboarding/`, etc.) and corresponding `page.tsx` files.
        - Uses route groups like `(authenticated)` or `(public)` to manage layouts and access control (though not explicitly listed, this is common).
        - `layout.tsx`: Root layout for the application.
        - `api/`: Contains API route handlers, notably `api/trpc/[trpc]/route.ts` for the tRPC endpoint.
    - **`components/`**: Reusable React components.
        - Organized by feature (e.g., `invoice/`, `onboarding/`, `layout/`) or UI elements (`ui/`).
        - `providers.tsx`: Wraps the application with context providers (tRPC, Theme, etc.).
    - **`lib/`**: Core logic, services, and utilities.
        - `request-network.ts`: Handles interactions with the Request Network SDK.
        - `user-profile-service.ts`, `company-profile-service.ts`: Manage user and company data.
        - `ephemeral-key-service.ts`, `ephemeral-wallet-service.ts`: Handle temporary keys/wallets for sharing.
        - `currencies.ts`: Defines supported currencies and their network details.
        - `auth.ts`: Authentication related utilities (likely interacting with Privy).
        - `utils.ts`: General utility functions.
        - `validators/`: Zod schemas for input validation.
        - `user-request-service.ts`: Service for managing user requests/invoices in the DB.
    - **`server/`**: Backend-specific code, primarily for tRPC.
        - `routers/`: Defines tRPC routers for different features.
            - `_app.ts`: Root tRPC router merging all sub-routers.
            - `invoice-router.ts`: Handles invoice creation, listing, and potentially status updates.
            - `allocations-router.ts`: Manages fund allocations.
            - `settings/`: Routers related to user/company settings.
            - `onboarding-router.ts`: Handles onboarding steps.
            - `safe-router.ts`: Manages interactions with Safe wallets.
            - `funding-source-router.ts`: Manages linked funding sources.
        - `context.ts`: Defines the tRPC context (e.g., user session, DB connection).
        - `create-router.ts`: Utility for creating tRPC routers/procedures.
    - **`db/`**: Database related files.
        - `schema.ts`: Defines the Drizzle ORM schema for the database tables.
        - `index.ts`: Initializes and exports the Drizzle client instance.
    - **`hooks/`**: Custom React hooks.
    - **`providers/`**: Context providers (might be duplicated/related to `components/providers.tsx`).
    - **`trpc/`**: tRPC client setup (`react.ts`).
    - **`utils/`**: Client-side utility functions (potentially merging with `lib/utils.ts` or differentiating client/server utils).
    - **`middleware.ts`**: Next.js middleware for handling requests before they reach the page/API (e.g., auth checks).
    - **`pages/`**: Likely contains any remaining Pages Router API routes if not fully migrated to App Router (or could be remnants).

# Database Migrations (Drizzle)

- If you make changes to the Drizzle schema (`packages/web/src/db/schema.ts`), you **MUST** generate and run database migrations.
- **Commands (run in `packages/web` directory):**
    ```bash
    pnpm db:generate
    pnpm db:migrate
    ```

# Tools


## Testing invoice creation

You can go faster by using this:
http://localhost:3050/dashboard/create-invoice?invoiceNumber=INV-NUQS-001&issueDate=2024-08-15T00%3A00%3A00.000Z&dueDate=2024-09-14T00%3A00%3A00.000Z&sellerBusinessName=My+Nuqs+Co.&sellerEmail=seller%40nuqs.test&sellerAddress=123+Nuqs+St&sellerCity=Queryville&sellerPostalCode=12345&sellerCountry=Stateland&buyerBusinessName=Client+Corp&buyerEmail=buyer%40client.test&buyerAddress=456+Param+Ave&buyerCity=Urlton&buyerPostalCode=67890&buyerCountry=Webia&paymentType=crypto&currency=USDC&network=base&note=Test+invoice+pre-filled+with+nuqs.&terms=Net+30&bankDetails=null&items=%5B%7B%22id%22%3A1%2C%22name%22%3A%22Web%20Development%22%2C%22quantity%22%3A10%2C%22unitPrice%22%3A%22100.50%22%2C%22tax%22%3A10%7D%2C%7B%22id%22%3A2%2C%22name%22%3A%22Consulting%22%2C%22quantity%22%3A5%2C%22unitPrice%22%3A%22150%22%2C%22tax%22%3A0%7D%5D

this will pre-fill the invoice with nuqs. and allow you to test the invoice creation flow.


## Github

* Use github tools to check repository issues and get repository info.

## Search

- Use search when you encounter issues with sdk or other dependencies.
- Or someitmes if relevant if there's a particular error your encountreing. 

---
In the app directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a Route Group to prevent the folder from being included in the route's URL path.

This allows you to organize your route segments and project files into logical groups without affecting the URL path structure.

Route groups are useful for:

Organizing routes into groups e.g. by site section, intent, or team.
Enabling nested layouts in the same route segment level:
Creating multiple nested layouts in the same segment, including multiple root layouts
Opting specific segments into a layout
Opting for loading skeletons on a specific route
Convention
A route group can be created by wrapping a folder's name in parenthesis: (folderName)

Good to know:

The naming of route groups has no special significance other than for organization. They do not affect the URL path.
Routes that include a route group should not resolve to the same URL path as other routes. For example, since route groups don't affect URL structure, (marketing)/about/page.js and (shop)/about/page.js would both resolve to /about and cause an error.
If you use multiple root layouts without a top-level layout.js file, your home page.js file should be defined in one of the route groups, For example: app/(marketing)/page.js.
Navigating across multiple root layouts will cause a full page load (as opposed to a client-side navigation). For example, navigating from /cart that uses app/(shop)/layout.js to /blog that uses app/(marketing)/layout.js will cause a full page load. This only applies to multiple root layouts.

--- 

# Next.js Route Groups

In Next.js's App Router, folders normally map directly to URL segments. Route Groups offer a way to organize your project files within the `app` directory without altering the URL structure. You create a route group by wrapping a folder name in parentheses, like `(marketing)` or `(shop)`. This grouping is purely for organizational purposes and the name in parentheses (`marketing`, `shop`) will not appear in the actual URL.

Route groups are primarily useful for structuring your project logically (e.g., grouping routes by feature or team) and for enabling more complex layout structures. For instance, you can use them to apply different nested layouts to segments that share the same URL level or even create multiple root layouts within your application. Keep in mind that routes within different groups shouldn't resolve to the same path (e.g., `(marketing)/about` and `(shop)/about` is an error), and navigating between segments managed by different root layouts will trigger a full page refresh.

